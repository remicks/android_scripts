#!/bin/bash

if [ ! "$INIT" ]; then
	cd $(dirname $0)
	export SCRIPT=$(echo "$0")
	../headerfile
	exit 0
fi

echo "Initilizing the build enviroment.."
echo ""
echo "Checking what Operating System you are running..."

if ( ! uname -a | grep -q x86_64 ); then
	clear

	echo "32-bit not supported!"
	echo "====================="
	echo "Build enviroment installation only supports 64-bit Operating Systems"
	echo ""
	echo "If you see this in error, please notify me at either xda or rootzwiki"
	echo "if you prefer email you can reach me at mishana@swordrune10.net"
	read -p "Press Enter to continue: " done
	exit 0
fi

if ( uname -a | grep -q Linux ); then
	# Fedora
	if ( find /etc/fedora-release &> /dev/null ) || ( find /etc/redhat-release &> /dev/null ); then
		echo "You are running Fedora or RedHat!"
		echo "Installing packages needed, please enter your password"
		sudo yum install gcc gcc-c++ gperf flex bison glibc-devel.{x86_64,i686} \
		zlib-devel.{x86_64,i686} ncurses-devel.i686 libsx-devel readline-devel.i386 \
		glibc.i686 glibc-devel.i686 libstdc++.i686 zlib-devel.i686 libX11-devel.i686 \
		libXrender.i686 libXrandr.i686

		echo "Installing java will take a while, to do this legally the Kitchen app will use exerpts from flexion.org oab-java script"
		read -p "Press Enter to continue: " done

		# fedora java installation
		# Exerpts from the much smarter (as u can see from the code) flexion.org oab-java script
		# slightly edited to remove unneeded code and grab the rpm version

		wget https://github.com/rraptorr/sun-java6/raw/master/debian/changelog -O $LOCAL/../changelog.tmp

		# Cet the current Debian package version
		DEB_VERSION=`head -n1 $LOCAL/../changelog.tmp | cut -d'(' -f2 | cut -d')' -f1 | cut -d'~' -f1`

		# Determine the currently supported Java version and update
		JAVA_VER=`echo ${DEB_VERSION} | cut -d'.' -f1`
		JAVA_UPD=`echo ${DEB_VERSION} | cut -d'.' -f2 | cut -d'-' -f1`

		# Try and dynamic find the JDK downloads
		echo " [x] Getting Java SE download page"
		wget "http://www.oracle.com/technetwork/java/javase/downloads/index.html" -O /tmp/oab-index.html

		# See if the Java version is on the download frontpage, otherwise look for it in
		# the previous releases page.
		DOWNLOAD_INDEX=`grep -P -o "/technetwork/java/javase/downloads/jdk-${JAVA_VER}u${JAVA_UPD}-downloads-\d+\.html" /tmp/oab-index.html | uniq`

		if [ -n "${DOWNLOAD_INDEX}" ]; then
			echo " [x] Getting current release download page "
			wget http://www.oracle.com/${DOWNLOAD_INDEX} -O /tmp/oab-download.html
		else
			echo " [x] Getting previous releases download page "
			wget http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html -O /tmp/oab-download.html
		fi

		for JAVA_BIN in jdk-${JAVA_VER}u${JAVA_UPD}-linux-x64-rpm.bin
		do
			# Get the download URL and size
			DOWNLOAD_URL=`grep ${JAVA_BIN} /tmp/oab-download.html | cut -d'{' -f2 | cut -d',' -f3 | cut -d'"' -f4`
			DOWNLOAD_SIZE=`grep ${JAVA_BIN} /tmp/oab-download.html | cut -d'{' -f2 | cut -d',' -f2 | cut -d':' -f2 | sed 's/"//g'`
			# Cookies required for download
			COOKIES="oraclelicensejdk-${JAVA_VER}u${JAVA_UPD}-oth-JPR=accept-securebackup-cookie;gpw_e24=http://edelivery.oracle.com"

			echo " [x] Downloading ${JAVA_BIN} : ${DOWNLOAD_SIZE} "
			wget --no-check-certificate --header="Cookie: ${COOKIES}" -c "${DOWNLOAD_URL}" -O $LOCAL/../${JAVA_BIN}

		done
		chmod +x $LOCAL/../${JAVA_BIN}
		cd $LOCAL/..
		sudo $LOCAL/../${JAVA_BIN}
		sudo rm -f *.rpm
		rm -f $LOCAL/../changelog.tmp

		echo ""
		echo "Finished!"
		envir=true
		read -p "Press Enter to continue: " done
	fi

	# Debian-based
	if ( find /etc/debian_version &> /dev/null ) || ( find /etc/lsb-release &> /dev/null ); then
		# Debian
		if ( lsb_release -i | grep -q Debian ); then
			echo "You are running Debian!"
			echo "Installing packages needed, please enter your password"
			sudo apt-get install git-core gnupg flex bison gperf build-essential \
			zip curl zlib1g-dev libc6-dev lib32ncurses5-dev ia32-libs \
			x11proto-core-dev libx11-dev lib32readline5-dev lib32z-dev \
			libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown \
			libxml2-utils xsltproc

			sudo ln -s /usr/lib32/mesa/libGL.so.1 /usr/lib32/mesa/libGL.so
		fi

		# Ubuntu 10.04, 10.10, and 11.04
		if ( lsb_release -c | grep -q natty ) || ( lsb_release -c | grep -q lucid ) || ( lsb_release -c | grep -q maverick ); then
			echo "You are running Ubuntu, either 10.04, 10.10, or 11.04!"
			echo "Installing packages needed, please enter your password"
			sudo apt-get install git-core gnupg flex bison gperf build-essential \
			zip curl zlib1g-dev libc6-dev lib32ncurses5-dev ia32-libs \
			x11proto-core-dev libx11-dev lib32readline5-dev lib32z-dev \
			libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown \
			libxml2-utils xsltproc

			sudo ln -s /usr/lib32/mesa/libGL.so.1 /usr/lib32/mesa/libGL.so
		fi

		# Ubuntu 11.10
		if ( lsb_release -c | grep -q oneiric ); then
			echo "You are running Ubuntu 11.10!"
			echo "Installing packages needed, please enter your password"
			sudo apt-get install git-core gnupg flex bison gperf build-essential \
			zip curl zlib1g-dev libc6-dev lib32ncurses5-dev ia32-libs \
			x11proto-core-dev libx11-dev lib32readline5-dev lib32z-dev \
			libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown \
			libxml2-utils xsltproc libx11-dev:i386

			sudo ln -s /usr/lib/i386-linux-gnu/libX11.so.6 /usr/lib/i386-linux-gnu/libX11.so
		fi

		# Ubuntu 12.04
		if ( lsb_release -c | grep -q precise ); then
			echo "You are running Ubuntu 12.04!"
			echo "Installing packages needed, please enter your password"
			sudo apt-get install git-core gnupg flex bison gperf build-essential \
			zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \
			libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev:i386 \
			g++-multilib mingw32 tofrodos python-markdown \
			libxml2-utils xsltproc zlib1g-dev:i386 \
			gcc-4.4 gcc-4.5 g++-4.4-multilib g++-4.5-multilib # threw these in to make sure it builds ;)
			sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so
		fi

		# Linux Mint
		if ( lsb_release -i | grep -q Mint ); then
			echo "You are running Linux Mint!"
			echo "Installing packages needed, please enter your password"
			sudo apt-get install git-core gnupg flex bison gperf build-essential \
			zip curl zlib1g-dev libc6-dev lib32ncurses5-dev ia32-libs \
			x11proto-core-dev libx11-dev lib32readline5-dev lib32z-dev \
			libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown \
			libxml2-utils xsltproc
		fi


		# Debian based java installation
		echo "Installing java will take a while, to do this legally the Kitchen app will use flexion.org oab-java script"
		echo ""
		wget https://github.com/flexiondotorg/oab-java6/raw/master/oab-java.sh -O $LOCAL/../oab-java.sh
		chmod +x $LOCAL/../oab-java.sh
		echo "Switching to oab-java script"
		read -p "Press Enter to continue: " done
		sudo $LOCAL/../oab-java.sh
		rm -f $LOCAL/../oab-java.sh
		rm -f $LOCAL/../oab-java.sh.log
		sudo apt-get install sun-java6-jre sun-java6-jdk

		echo ""
		echo "Finished!"
		export envir=true
		read -p "Press Enter to continue: " done
	fi



	if ( find /etc/arch-release &> /dev/null ); then
		echo "You are running Arch Linux!"
		echo "Installing packages needed, please enter your password"
		sudo pacman -Sy abs base-devel
		sudo pacman -S openjdk6 perl git gnupg flex bison gperf zip unzip sdl wxgtk \
		squashfs-tools ncurses libpng zlib libusb libusb-compat readline

		mkdir -p $LOCAL/../archbuilds

		wget http://swordrune10.net/files/archlinux/make-3.81.tar
		tar xvf make-3.81.tar
		cd make-3.8.1
		makepkg -cfs PKGBUILD
		sudo pacman -U make-3.81-*-x86_64.pkg.tar.xz

		cd ..
		wget http://swordrune10.net/files/archlinux/git-1.7.6.tar
		tar xvf git-1.7.6.tar
		cd git-1.7.6
		makepkg -cfs PKGBUILD
		sudo pacman -U git-1.7.6-*-x86_64.pkg.tar.xz

		cd ..
		wget http://swordrune10.net/files/archlinux/perl-5.10.1.tar
		tar xvf perl-5.10.1.tar
		cd perl-5.10.1
		makepkg -cfs PKGBUILD
		sudo pacman -U perl-5.10.1-*-x86_64.pkg.tar.xz

		cd ..
		https://aur.archlinux.org/packages/package-query-git/package-query-git.tar.gz
		tar xvf package-query-git.tar.gz
		cd package-query-git
		makepkg -cfs PKGBUILD
		sudo pacman -U package-query-git-*-x86_64.pkg.tar.xz

		cd ..
		 https://aur.archlinux.org/packages/yaourt-git/yaourt-git.tar.gz
		tar xvf yaourt-git.tar.gz
		cd yaourt-git
		makepkg -cfs PKGBUILD
		sudo pacman -U package-query-git-*-x86_64.pkg.tar.xz

		sudo yaourt -Sy esdl pngcrush schedtool repo

		sudo sed -i 's/#Include = \/etc\/pacman.d\/mirrorlist/Include = \/etc\/pacman.d\/mirrorlist/g' /etc/pacman.conf

		sudo pacman -Sy gcc-multilib gcc-libs-multilib binutils-multilib libtool-multilib lib32-libusb \
		lib32-libusb-compat lib32-readline lib32-glibc lib32-zlib

		if ( python -V | grep -q "Python 3"); then
			sudo mv /usr/bin/python /usr/bin/python.bak
			sudo ln -s /usr/bin/python2 /usr/bin/python
		fi

		rm -rf $LOCAL/../archbuilds

		echo "Installing java will take a while, to do this legally the Kitchen app will use exerpts from flexion.org oab-java script"
		echo "Press Enter to continue"
		read -p "Press Enter to continue: " done
		# Exerpts from the much smarter (as u can see from the code) flexion.org oab-java script
		# slightly edited to remove unneeded code

		wget https://github.com/rraptorr/sun-java6/raw/master/debian/changelog -O $LOCAL/../archbuilds/changelog.tmp

		# Cet the current Debian package version
		DEB_VERSION=`head -n1 $LOCAL/../archbuilds/changelog.tmp | cut -d'(' -f2 | cut -d')' -f1 | cut -d'~' -f1`

		# Determine the currently supported Java version and update
		JAVA_VER=`echo ${DEB_VERSION} | cut -d'.' -f1`
		JAVA_UPD=`echo ${DEB_VERSION} | cut -d'.' -f2 | cut -d'-' -f1`

		# Try and dynamic find the JDK downloads
		echo " [x] Getting Java SE download page"
		wget "http://www.oracle.com/technetwork/java/javase/downloads/index.html" -O /tmp/oab-index.html

		# See if the Java version is on the download frontpage, otherwise look for it in
		# the previous releases page.
		DOWNLOAD_INDEX=`grep -P -o "/technetwork/java/javase/downloads/jdk-${JAVA_VER}u${JAVA_UPD}-downloads-\d+\.html" /tmp/oab-index.html | uniq`

		if [ -n "${DOWNLOAD_INDEX}" ]; then
			echo " [x] Getting current release download page "
			wget http://www.oracle.com/${DOWNLOAD_INDEX} -O /tmp/oab-download.html
		else
			echo " [x] Getting previous releases download page "
			wget http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html -O /tmp/oab-download.html
		fi

		for JAVA_BIN in jdk-${JAVA_VER}u${JAVA_UPD}-linux-x64.bin
		do
			# Get the download URL and size
			DOWNLOAD_URL=`grep ${JAVA_BIN} /tmp/oab-download.html | cut -d'{' -f2 | cut -d',' -f3 | cut -d'"' -f4`
			DOWNLOAD_SIZE=`grep ${JAVA_BIN} /tmp/oab-download.html | cut -d'{' -f2 | cut -d',' -f2 | cut -d':' -f2 | sed 's/"//g'`
			# Cookies required for download
			COOKIES="oraclelicensejdk-${JAVA_VER}u${JAVA_UPD}-oth-JPR=accept-securebackup-cookie;gpw_e24=http://edelivery.oracle.com"

			echo " [x] Downloading ${JAVA_BIN} : ${DOWNLOAD_SIZE} "
			wget --no-check-certificate --header="Cookie: ${COOKIES}" -c "${DOWNLOAD_URL}" -O $LOCAL/../archbuilds/${JAVA_BIN}

		done

		chmod +x $LOCAL/../archbuilds/${JAVA_BIN}

		rm -rf $LOCAL/../archbuilds
		sudo mv ${JAVA_BIN} /opt

 		sudo cd /opt
 		sudo ./${JAVA_BIN}
 		sudo rm ${JAVA_BIN}

		cd jdk*/bin
		jdk=$( pwd )

		cd ../jre/bin
		jre=$( pwd )

		sed -i -e "/PATH=/ a \
PATH="\$PATH:$jdk:$jre"" /etc/profile

		echo ""
		echo "Finished!"
		export envir=true
		read -p "Press Enter to continue: " done
	fi
fi

if ( uname -a | grep -q Darwin ); then
	clear

	echo "Is Xcode installed? We recommend version 3.1.4 or newer"
	read -p "yes/no? " xcode

	echo "Is MacPorts installed?"
	read -p "yes/no? " macports

	if [ $xcode == "y" ] || [ $xcode == "yes" ] && [ $macports == "y" ] || [ $macports == "yes" ]; then
		if ( ! cat ~/.bash_profile | grep -q "export PATH=/opt/local/bin:\$PATH" ); then
			echo "export PATH=/opt/local/bin:\$PATH" >> ~/.bash_profile
		fi

		sudo port install gmake libsdl git-core gnupg

		if ( ! cat ~/.bash_profile | grep -q "ulimit -S -n 1024" ); then
			echo "ulimit -S -n 1024" >> ~/.bash_profile
		fi
	else
		echo "Aborting.."
		read -p "Press Enter to continue: " done
		exit 0
	fi

	echo ""
	echo "Finished!"
	read -p "Press Enter to continue: " done
	exit 0
fi

if [! $envir ]; then
	clear

	echo "Operating System not supported!"
	echo "==============================="
	echo "Supported Operating Systems (only 64-bit):"
	echo "Ubuntu 10.04 - 12.04 (Full Support)"
	echo "Debian (General Support)"
	echo "Linux Mint (General Support)"
	echo "Arch Linux (General Support)"
	echo "Fedora (General Support)"
	echo "Mac OS X (Semi-General Support)"
	echo ""
	echo "If you see this in error, please notify me at either xda or rootzwiki"
	echo "if you prefer email you can reach me at mishana@swordrune10.net"
	echo ""
	read -p "Press Enter to continue: " done
	exit 0
fi
